<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:ns1="*"
			   minWidth="400" minHeight="300" creationComplete="init(event)">
    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->
    </fx:Declarations>
    <fx:Script>
		<![CDATA[
		/*
		 * Flex4 demo for Pubnub service
		 * define public vars for custom connection.
		 * */
			import com.pubnub.*;
			import com.pubnub.json.*;
			import com.pubnub.operation.*;
			import flash.events.*;
			import flash.external.*;
			import flash.utils.*;
			import mx.binding.utils.*;
			import mx.events.*;
			import utils.*;
			
        [Bindable]
        public var channel:String = 'test_channel';
        //public var channel:String = 'test_channel_a,test_channel_b';

        [Bindable]
        public var origin:String = 'pubsub.pubnub.com';
        //public var origin:String = 'multiplexing.pubnub.com';

        [Bindable]
        public var pub_key:String = 'demo';

        [Bindable]
        public var sub_key:String = 'demo';

        [Bindable]
        public var secret_key:String = '';

        [Bindable]
        public var cipher_key:String = '';
		
		[Bindable]
        public var publishMessageText:String = 'hey';
        //public var publishMessageText:String = '{"text":"hey"}';
		
        public var ssl:Boolean = false;

        private var consoleCounter:int = 1;
        private var perfomance:Perfomance;
		
		protected function init(event:FlexEvent):void {
			perfomance = new Perfomance(perfomanceTestView.getChildAt(0));
			perfomance.ssl = ssl;
			BindingUtils.bindSetter(updateOrigin, this, "origin");
		}
			
        protected function onInitBtnClick(event:MouseEvent):void{
            //trace('onInitBtnClick');
           var config:Object = {
                origin:		this.origin,
                publish_key:this.pub_key,
                sub_key:	this.sub_key,
                secret_key:	this.secret_key,
                cipher_key:	this.cipher_key,
                ssl:		this.ssl}
			
            Pn.instance.addEventListener(PnEvent.INIT, onInit);
            Pn.instance.addEventListener(PnEvent.INIT_ERROR, onInitError);
            Pn.instance.addEventListener(PnEvent.SUBSCRIBE, onSubscribe);
            Pn.instance.addEventListener(PnEvent.PRESENCE, onPresence);
            Pn.instance.addEventListener(PnEvent.DETAILED_HISTORY, onDetailedHistory);
            Pn.instance.addEventListener(PnEvent.PUBLISH, onPublish);
            Pn.instance.addEventListener(PnEvent.TIME, onPnTime);
            Pn.init(config);
        }
		
		
		
        private function onInit(e:PnEvent):void {
			//if (perfomance.isRun) return;
            callExternalInterface("console.log", ("Pn init : " + Pn.instance.sessionUUID));
        }

        private function onInitError(e:PnEvent):void {
			//if (perfomance.isRun) return;
            callExternalInterface("console.log", ("onInitError"));
        }

        private function onSubscribeClick(e:MouseEvent):void {
             Pn.subscribe(channel);
        }

        private function onSubscribe(e:PnEvent):void {
			//if (perfomance.isRun) return;
            switch (e.status) {
                case OperationStatus.DATA:
                    callExternalInterface("console.log", ("Subscribe [DATA]: " + PnJSON.stringify(e.data)));
                    break;

                case OperationStatus.CONNECT:
                    callExternalInterface("console.log", ("Subscribe [CONNECT] : " + e.channel));
                    break;

                case OperationStatus.DISCONNECT:
                    callExternalInterface("console.log", ("Subscribe [DISCONNECT] : " + e.channel));
                    break;

                case OperationStatus.ERROR:
                    callExternalInterface("console.log", ("Subscribe [ERROR] : " + e.channel + ', ' + e.data));
                    break;
            }
        }
		
		private function onPresence(e:PnEvent):void {
			 callExternalInterface("console.log", ("Presence : " + PnJSON.stringify(e.data)));
		}

        protected function OnClearConsoleBtnClick(event:MouseEvent):void{
            consoleCounter = 1;
            consoleArea.text = '';
        }

        private function onDetHistoryClick(e:MouseEvent):void {
            var args:Object = { };
            args.start = startTimeTxt.enabled ? startTimeTxt.text: null ;
            args.end = endTimeTxt.enabled ? endTimeTxt.text : null;
            args.count = countTxt.enabled ? countTxt.text : null;
            args.reverse = reverseTxt.enabled ? (reverseTxt.text == 'true' ? true : false): null;
            args.channel = this.channel;
            args['sub-key'] = this.sub_key;
            Pn.instance.detailedHistory(args);
        }

        private function onDetailedHistory(e:PnEvent):void {
			//if (perfomance.isRun) return;
            switch (e.status) {
                case OperationStatus.DATA:
                    var messages:Array = e.data as Array;
                    callExternalInterface("console.log", ("DetailedHistory [DATA], url : " + e.operation.url));
                    callExternalInterface("console.log", ("DetailedHistory [DATA], channel : " + e.channel + ', result : \n' + messages.join('\n')));
                    break;

                case OperationStatus.ERROR:
                    callExternalInterface("console.log", ("DetailedHistory [ERROR], url : " + e.operation.url));
                    callExternalInterface("console.log", ("DetailedHistory [ERROR] : " + e.data));
                    break;
            }
        }

        protected function unsubscribeBtn_clickHandler(event:MouseEvent):void{
            // TODO Auto-generated method stub
            Pn.unsubscribeAll();
        }
			
		protected function unsubscribeChannel_clickHandler(event:MouseEvent):void{
				// TODO Auto-generated method stub
				Pn.unsubscribe(this.unsubChannelName.text);
		}

        private function callExternalInterface(functionName:String, ...rest):void {
            if (ExternalInterface.available) {
                ExternalInterface.call(functionName, rest);
            }
            consoleArea.appendText((consoleCounter++) +'. '+ rest + '\n');
        }

		private var startPublishTime:Number;
        protected function publishBtn_clickHandler(event:MouseEvent):void {
			startPublishTime = getTimer();
            Pn.publish({channel : channel, message : publishMessageTxt.text});
        }

        private function onPublish(e:PnEvent):void {
			//trace('onPublish : ' + e.status)
			//if (perfomance.isRun) return;
			trace('publish time : ' + (getTimer() - startPublishTime));
            switch (e.status) {
                case OperationStatus.DATA:
                    var messages:Array = e.data as Array;
                    //callExternalInterface("console.log", ("Publish [DATA], url : " + e.operation.url));
                    if(messages) callExternalInterface("console.log", ("Publish [DATA], channel : " + e.channel + ', result : [' + messages.join(',') + ']'));
                    break;

                case OperationStatus.ERROR:
                    callExternalInterface("console.log", ("Publish [ERROR], url : " + e.operation.url));
                    callExternalInterface("console.log", ("Publish [ERROR] : " + e.data));
                    break;
            }
        }
		
		private function onTime(e:MouseEvent):void {
			Pn.time(); 
		}
		
		private function onPnTime(e:PnEvent):void {
			//if (perfomance.isRun) return;
			switch (e.status) {
                case OperationStatus.DATA:
                    callExternalInterface("console.log", ("Time [DATA],  : result : " + e.data));
                    break;

                case OperationStatus.ERROR:
                    callExternalInterface("console.log", ("Time [ERROR],  : result : " + e.data));
                    break;
            }
		}
		
		private function updateOrigin(value:String = null):void{
			Pn.instance.origin = value;
		}
		
		private function onStartPerfomanceTest(e:MouseEvent):void {
			perfomance.start();
		}
		
		private function onStopPerfomanceTest(e:MouseEvent):void {
			perfomance.stop();
		}
			
		]]>
	</fx:Script>

    <s:Label x="125" y="13" height="10" fontWeight="bold" color="#E01F1F" text="Verify below settings, and then be sure to initialize from Init tab before proceeding."
             textAlign="center" verticalAlign="middle"/>

    <s:Label x="10" y="10" fontSize="14" fontWeight="bold" text="Device Console"/>
    <s:Label x="13" y="39" color="#4D4C4C" fontStyle="italic" text="Channel"/>
    <s:TextInput id="channelTxt" x="68" y="34" width="246" text="@{channel}"/>
    <s:Label x="28" y="67" color="#4D4C4C" fontStyle="italic" text="Origin"/>
    <s:TextInput id="originTxt" x="68" y="63" width="246" text="@{origin}"/>
    <mx:TabNavigator left="10" right="10" top="108" bottom="140" selectedIndex="5">
        <s:NavigatorContent width="100%" height="100%" label="Init (1)">
            <s:Label x="16" y="30" color="#4D4C4C" fontStyle="italic" text="secret_key" textAlign="right"/>
            <s:TextInput id="secretKeyTxt" x="81" y="25" width="246" text="@{secret_key}"/>
            <s:Label x="16" y="60" color="#4D4C4C" fontStyle="italic" text="cipher_key" textAlign="right"/>
            <s:TextInput id="cipherKeyTxt" x="81" y="55" width="246" text="@{cipher_key}"/>
            <s:Button id="initBtn" x="10" y="85" label="Init" click="onInitBtnClick(event)"/>
        </s:NavigatorContent>
        <s:NavigatorContent width="100%" height="100%" label="Subscribe (2)">
            <s:Button id="subscribeBtn" x="10" y="5" label="Subscribe" click="onSubscribeClick(event)" />
            <s:Button id="unsubscribeBtn" x="10" y="35" label="Unsubscribe all"
                      click="unsubscribeBtn_clickHandler(event)"/>
			<s:Button id="unsubscribeChannelBtn" x="9" y="69" label="Unsubscribe channel"
					  click="unsubscribeChannel_clickHandler(event)"/>
			<s:TextInput id="unsubChannelName" x="156" y="69" width="214"/>
        </s:NavigatorContent>
        <s:NavigatorContent width="100%" height="100%" label="DetailedHistory (3)">

            <s:Label x="2" y="30" width="175" color="#4D4C4C" fontStyle="italic" text="start (optional)"
                     textAlign="right"/>
            <s:TextInput id="startTimeTxt" x="185" y="25" width="246" text="0" enabled="{startCb.selected}"/>

            <s:Label x="2" y="60" width="175" color="#4D4C4C" fontStyle="italic" text="end (optional)"
                     textAlign="right"/>
            <s:TextInput id="endTimeTxt" x="185" y="55" width="246" text="13505030564366949"  enabled="{endCb.selected}"/>


            <s:Label x="2" y="90" width="175" color="#4D4C4C" fontStyle="italic" text="count (optional, default 100)"
                     textAlign="right"/>
            <s:TextInput id="countTxt" x="185" y="85" width="246" text="5"  enabled="{countCb.selected}"/>

            <s:Label x="2" y="120" width="175" color="#4D4C4C" fontStyle="italic" text="reverse (optional, default false)"
                     textAlign="right"/>
            <s:TextInput id="reverseTxt" x="185" y="115" width="246" text="false"  enabled="{reverseCb.selected}"/>


            <s:Button id="DetailedHistoryBtn" x="66" y="145" label="Detailed History"
                      click="onDetHistoryClick(event)"/>

            <s:CheckBox id="startCb" x="440" y="29" enabled="true" selected="false"/>
            <s:CheckBox id="endCb" x="440" y="59" enabled="true" selected="false"/>
            <s:CheckBox id="countCb" x="440" y="88" enabled="true" selected="true"/>
            <s:CheckBox id="reverseCb" x="440" y="116" enabled="true" selected="false"/>

        </s:NavigatorContent>
        <s:NavigatorContent width="100%" height="100%" label="Publish (4)">
            <s:Button id="publishBtn" x="74" y="39" label="Publish"
                      click="publishBtn_clickHandler(event)"/>
            <s:Label x="10" y="14" width="57" color="#4D4C4C" fontStyle="italic" text="message"
                     textAlign="right"/>
            <s:TextInput id="publishMessageTxt" x="75" y="9" width="246" text="@{publishMessageText}"  enabled="true"/>
        </s:NavigatorContent>
		
		<s:NavigatorContent width="100%" height="100%" label="Time (5)">
            <s:Button id="timeBtn" x="5" y="10" label="Time"
                      click="onTime(event)"/>
        </s:NavigatorContent>
		
		<s:NavigatorContent width="100%" height="100%" label="Perfomance Test (6)">
            <s:Button x="10" y="0" label="Start"
                      click="onStartPerfomanceTest(event)"/>
			
			<s:Button x="90" y="0" label="Stop"
					  click="onStopPerfomanceTest(event)"/>
			
			
			<s:Scroller x="10" y="30" width="100%" height="100%">
				<s:VGroup width="100%" height="100%">
					<ns1:PerfomanceTestView x="10" y="29" id="perfomanceTestView">
					</ns1:PerfomanceTestView>
				</s:VGroup>
			</s:Scroller>
        </s:NavigatorContent>
    </mx:TabNavigator>
    <s:TextArea id="consoleArea" left="10" right="100" bottom="10" height="120"/>
    <s:Button id="clearConsoleBtn" right="10" bottom="110" width="80" height="21" label="Clear"
			  click="OnClearConsoleBtnClick(event)"/>
    <s:Label x="343" y="67" color="#4D4C4C" fontStyle="italic" text="sub_key" textAlign="right"/>
    <s:TextInput id="subKeyTxt" x="398" y="62" width="246" text="@{sub_key}"/>
    <s:Label x="324" y="38" color="#4D4C4C" fontStyle="italic" text="publish_key" textAlign="right"/>
    <s:TextInput id="publishKeyTxt" x="397" y="34" width="246" text="@{pub_key}"/>
</s:Application>
